

class Solution {
public:
    bool canChange(string start, string target) {
        int end = target.size();
        int ScntL = 0, ScntR = 0, TcntL = 0, TcntR = 0;
        string ss = "", st = "";
        for(int i = 0; i < end; i++)
        {
            if(start[i] != '_')
                ss += start[i];
            if(target[i] != '_')
                st += target[i];
        }
        if(ss != st) return false;
        for(int i = 0; i < end; i++)
        {
            if(start[i] == 'L')
                ScntL++;
            if(target[i] == 'L')
                TcntL++;
            if(ScntL > TcntL)
                return false;
        }
        if(ScntL != TcntL)
            return false;
        for(int i = 0; i < end; i++)
        {
            if(start[i] == 'R')
                ScntR++;
            if(target[i] == 'R')
                TcntR++;
            if(ScntR < TcntR)
                return false;
        }
        if(ScntR != TcntR)
            return false;
        return true;
    }
};


Approach 2  better


class Solution {
public:
    bool canTransform(string s, string e) {
      int i=0,j=0,n=s.size();
        while((i<s.size())||(j<s.size())){
            while(s[i]=='X'){
                i++;
            }
            while(e[j]=='X'){
                j++;
            }
            if((i==n)&&(j==n)){
                return true;
            }
           else if((i==n)||(j==n)||(s[i]!=e[j])){
return false;
               }
            else if((s[i]=='R')&&(i>j)){
                return false;
            }
            else if((s[i]=='L')&&(i<j)){
                return false;
            }
            i++;
            j++;
        }
        return true;
        
    }
};