/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
void preorder(TreeNode*root,queue<TreeNode*>&q){
    if(!root){
        return;
    }
    q.push(root);
    preorder(root->left,q);
    preorder(root->right,q);

}
    void flatten(TreeNode* root) {
       
        queue<TreeNode*>q;
        if(!root){
            return;
        }
         preorder(root,q);
      
        while(!(q.empty())){
            TreeNode*f=q.front();
            q.pop();
            f->left=NULL;
            if(!q.empty()){
                f->right=q.front();
            }

           
        }
        return;
    }
};

//Recursive
class Solution {
public:
TreeNode* rightMostRoot(TreeNode*root){
    if(root->right==NULL){
        return root;
    }
     return rightMostRoot(root->right);

}
    void flatten(TreeNode* root) {
       
       
        if(!root){
            return;
        }
        TreeNode*rightMost,*nextRight;
        if(root->left){
            rightMost=rightMostRoot(root->left);
            nextRight=root->right;
            root->right=root->left;
            root->left=NULL;
            rightMost->right=nextRight;
        }
        flatten(root->right);
        return;
    }
};
Console


