/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    string tree2str(TreeNode* root) {
        string ans="";
        stack<TreeNode*>s;
        s.push(root);
        while(!s.empty()){
            TreeNode*f=s.top();
            s.pop();
            if(!f){
                ans+=")";
                continue;
            }
            ans+="(" + to_string(f->val);
            if(!(f->left) && !(f->right)){
                ans+=")";
                continue;
            }
            s.push(NULL);
            if(f->right){
                s.push(f->right);
            }
            if(f->left){
                s.push(f->left);

            }
            else{
                ans+="()";
            }
        }
        return ans.substr(1,ans.size()-2);
    }
};


// Recursive


class Solution {
public:
void solve (TreeNode* root,string &s){

    if(!(root->left) && !(root->right)){
        s+=to_string(root->val);
        return;
    }
    s+=to_string(root->val);
    s+="(";
    if(root->left){
        solve(root->left,s);
    }
        s+=")";
 if(root->right){
     s+="(";
        solve(root->right,s);
        s+=")";
    }

return;
}
    string tree2str(TreeNode* root) {
        string s="";
        solve(root,s);
        return s;
    }
};
Console

