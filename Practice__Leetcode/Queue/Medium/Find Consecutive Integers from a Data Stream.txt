class DataStream {
public:
queue<int>q;
int n;
int key,sum;

    DataStream(int value, int k) {
        n=k;
        key=value;
        sum=0;
    }
    
    bool consec(int num) {
        
    num=(num==key)?1:0;
    sum+=num;
    q.push(num);
    if(q.size()<n){
        return false;
    }
    else if(q.size()==n){
        return sum==n;
    }
    
    sum-=q.front();
    q.pop();
    return sum==n;
 
    }
};

/**
 * Your DataStream object will be instantiated and called as such:
 * DataStream* obj = new DataStream(value, k);
 * bool param_1 = obj->consec(num);
 */

approach 2

class DataStream {
public:
    int cnt=0;
    int val,n;
    
    DataStream(int value, int k) {
        cnt=0;
        val=value;
        n=k;
    }
    
    bool consec(int num) {
        if(num==val){
            cnt++;
        }
        else{
            cnt=0;
        }
        if(cnt>=n){
            return true;
        }
        return false;
    }
};

/**
 * Your DataStream object will be instantiated and called as such:
 * DataStream* obj = new DataStream(value, k);
 * bool param_1 = obj->consec(num);
 */