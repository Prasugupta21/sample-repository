/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
public:
    vector<vector<int>> levelOrder(Node* root) {
        vector<vector<int>>v;
        vector<int>temp;
        if(!root){
            return v;
        }
    queue<Node*>q;
    q.push(root);
    q.push(NULL);
    while(!q.empty()){
        Node*f=q.front();
        q.pop();
        if(!f){
            v.push_back(temp);
            temp.clear();
            if(!q.empty()){
                q.push(NULL);
            }

        }
        else{
            temp.push_back(f->val);
            for(auto child : f->children){
                q.push(child);
            }
        }

    }
        return v;
    }
};


//Recursive

/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
public:
void helper(Node*root,vector<vector<int>>&v,int level){
    if(v.size()==level){
        v.push_back({});
    }
    v[level].push_back(root->val);
    for(auto child:root->children){
        helper(child,v,level+1);
    }
}
    vector<vector<int>> levelOrder(Node* root) {
        vector<vector<int>>v;
      
        if(!root){
            return v;
        }
        helper(root,v,0);
        return v;
        }
};