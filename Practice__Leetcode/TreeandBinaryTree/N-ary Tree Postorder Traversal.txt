/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
public:
   void postorderHelper(Node*root,vector<int>&v){
    if(!root){
        return ;
    }
   
    for(int i=0;i<root->children.size();i++){
        postorderHelper(root->children[i],v);
    }
     v.push_back(root->val);
    
}
    vector<int> postorder(Node* root) {
        vector<int>v;
       postorderHelper(root,v);
       return v;
    
    }
};


//itearative

/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
public:
    vector<int> postorder(Node* root) {
        vector<int>ans;
        if(!root){
            return ans;
        }
        stack<Node*>s;
        s.push(root);
        while(!s.empty()){
            Node*child=s.top();
            s.pop();
            ans.push_back(child->val);
            for(int i=0;i<child->children.size();i++){
                           s.push(child->children[i]);
            }

        }
        reverse(ans.begin(),ans.end());
        return ans;
    }
};