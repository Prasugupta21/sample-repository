class Solution {
public:
    Node* connect(Node* root) {

        if(!root){
            return NULL;
        }
        if(root->left){
            root->left->next=root->right;
            if(root->next){
                root->right->next=root->next->left;
            }
            Node*x=connect(root->left);
            Node*y=connect(root->right);
        }
        return root;
    }
};


/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    Node* connect(Node* root) {
        queue<Node*>q;
        if(!root){
            return NULL;
        }
        q.push(root);
        q.push(NULL);
        while(!(q.empty())){
           Node *f =q.front();
           q.pop();
           if(!f){
               if(!(q.empty())){
                   q.push(NULL);
               }
           }
           else{
if(!(q.empty())){
               f->next=q.front();
           }
           if(f->left){
               q.push(f->left);

           }
            if(f->right){
               q.push(f->right);

           }
           }
           
           

        }
        return root;
    }
};