/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<double> averageOfLevels(TreeNode* root) {
        queue<TreeNode*>q;
        q.push(root);
        q.push(NULL);
        vector<vector<int>>v;
        vector<int>temp;
        while(!(q.empty())){
            TreeNode*f=q.front();
            q.pop();
            if(!f){
                v.push_back(temp);
                temp.clear();
                if(!(q.empty())){
                    q.push(NULL);
                    
                }

            }
            else{
                temp.push_back(f->val);
                  if(f->left){
                q.push(f->left);
            }
            if(f->right){
                q.push(f->right);
            }
            }
          
        }
        vector<double>ans;
        double j;
        for(double i=0;i<v.size();i++){
            double sum=0;
            for(j=0;j<v[i].size();j++){
                sum+=v[i][j];
            }
            ans.push_back(sum/j);
        }
        return ans;
    }
};

//Recursive

class Solution {
public:
void solve (TreeNode* root,vector<vector<double>>&v,int level){
    if(v.size()==level){
        v.push_back({});
        
    }
     v[level].push_back(root->val);
     if(root->left){
         solve(root->left,v,level+1);
     }
     if(root->right){
         solve(root->right,v,level+1);
     }
     return;
}
    vector<double> averageOfLevels(TreeNode* root) {
       vector<vector<double>>v;
       vector<double>ans;
       int level=0;
       solve(root,v,level);
       int j;
       for(int i=0;i<v.size();i++){
           double sum=0;
           for(j=0;j<v[i].size();j++){
               sum+=v[i][j];
           }
           ans.push_back(sum/j);
       }
       return ans;
    }
};

