// iterative

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
   
public:


    bool hasPathSum(TreeNode* root, int targetSum) {
       
        if(!root){
            return false;
        }
        queue<TreeNode*>q;
      
        q.push(root);
        while(!q.empty()){
            TreeNode*f=q.front();
            q.pop();
            if(f->left){
               f->left->val+=f->val;
               q.push(f->left);
            }
            if(f->right){
                f->right->val+=f->val;
                q.push(f->right);
            }
            if(!(f->left) && !(f->right) && f->val==targetSum){
                return true;
            }
        }
    
    return false;
    }
};

// recursive

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
   
public:
bool solve (TreeNode* root, int targetSum,int ans,int temp){
    if(!(root->left) && !(root->right)){
      ans+=root->val;
      if(ans==targetSum){
          return true;
      }
      ans-=root->val;
        return false;
    }
    ans+=root->val;
    bool x1=false,x2=false;
if(root->left){
   x1= solve(root->left,targetSum,ans,temp);
}

if(root->right){
   x2= solve(root->right,targetSum,ans,temp);
}
return  x1 || x2;

}
    bool hasPathSum(TreeNode* root, int targetSum) {
        int ans=0;
        if(!root){
            return false;
        }
      return  solve(root,targetSum,ans,0);

       
    }
};