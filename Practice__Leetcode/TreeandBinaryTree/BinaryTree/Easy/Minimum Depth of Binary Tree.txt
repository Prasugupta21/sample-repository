/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
int solve(TreeNode*root){
    if(!root){
        return INT_MAX;
    }
  if(!(root->left) && !(root->right)){
            return 1;
        }
        return 1+min(solve(root->left),solve(root->right));
}
    int minDepth(TreeNode* root) {
        if(!root){
            return 0;
        }
        return solve(root);
      
        
      
 
    }
};

//iterative

class Solution {
public:


    int minDepth(TreeNode* root) {
        int level=0;
        if(!root){
            return 0;
        }
        queue<TreeNode*>q;
        q.push(root);
        while(!q.empty()){
           
           int n=q.size();
           level++;
           while(n--){
 TreeNode*f=q.front();
 q.pop();
 if(!(f->left)&&!(f->right)){
     return level;
 }
 if(f->left){
     q.push(f->left);
     

 }
 if(f->right){
     q.push(f->right);
 }
           }
            
        }
      
        
      
 return 0;
    }
};
Console
