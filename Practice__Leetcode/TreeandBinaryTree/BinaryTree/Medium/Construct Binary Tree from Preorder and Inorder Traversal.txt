/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
TreeNode*buildTreeHelper(vector<int>& in, vector<int>& pre,int preS,int preE,int inS,int inE){
    if(inS>inE){
        return NULL;
    }
     int rootData=pre[preS];
    TreeNode*root=new TreeNode(rootData);
    int rootIndex=-1;
    for(int i=inS;i<=inE;i++){
        if(in[i]==rootData){
            rootIndex=i;
            break;
        }
    }

    int lpreS=preS+1;
int linS=inS;
int linE=rootIndex-1;
    int lpreE=lpreS+linE-linS;
    int rinS=rootIndex+1;
    int rinE=inE;
    int rpreS=lpreE+1;
    int rpreE=preE;
    root->left=buildTreeHelper(in,pre,lpreS,lpreE,linS,linE);
    root->right=buildTreeHelper(in,pre,rpreS,rpreE,rinS,rinE);
    return root;
}
    TreeNode* buildTree(vector<int>& pre, vector<int>& in) {
      return buildTreeHelper(in,pre,0,pre.size()-1,0,in.size()-1);

        
    }
};

// 2nd Approach

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
int preIndex;
TreeNode*buildTreeHelper(vector<int>& in, vector<int>& pre,int inS,int inE){
    if(inS>inE){
        return NULL;
    }
    int rootData=pre[preIndex++];
    TreeNode*root=new TreeNode(rootData);
    int rootIndex=-1;
    for(int i=inS;i<=inE;i++){
        if(in[i]==rootData){
            rootIndex=i;
            break;
        }
    }
    root->left=buildTreeHelper(in,pre,inS,rootIndex-1);
    root->right=buildTreeHelper(in,pre,rootIndex+1,inE);
    return root;
}
    TreeNode* buildTree(vector<int>& pre, vector<int>& in) {
        preIndex=0;
      return buildTreeHelper(in,pre,0,in.size()-1);

        
    }
};