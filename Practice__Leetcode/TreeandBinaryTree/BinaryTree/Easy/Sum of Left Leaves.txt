class Solution {

public:

    int sumOfLeftLeaves(TreeNode* root) {
     int ans=0;
    queue<pair<TreeNode*,bool>>q;
    if(!(root->left) && !(root->right)){
        return 0;
    }
    q.push({root,1});
    while(!(q.empty())){
        pair p=q.front();
        TreeNode*f=p.first;
        q.pop();
        if(!(f->left ) && !(f->right) && p.second){
            ans+=f->val;
        }
        if(f->left){
            q.push({f->left,1});
        }
        if(f->right){
            q.push({f->right,0});
        }
    }
     return ans; 
    }
};

// iterative 2

class Solution {

public:
    int sumOfLeftLeaves(TreeNode* root) {
       int sum=0;
        queue<TreeNode*> q;
        if(!root) return 0;
        q.push(root);
                
        while(!q.empty())
        {
            TreeNode* temp=q.front();
            q.pop();
            if(temp->left){
                q.push(temp->left);
                if(!temp->left->left && !temp->left->right) sum+=temp->left->val;
            }
            if(temp->right) q.push(temp->right);
            
        }
        return sum;
    }
};

//Recursive
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
     int flag;
public:
void solve(TreeNode* root,int &ans){
    if(!(root->left) &&!(root->right) && flag){
        ans+=root->val;
        return;
    }
     flag=0;
    if(root->left){
        flag=1;
        solve(root->left,ans);
    }
     flag=0;
    if(root->right){
        solve(root->right,ans);
    }
}
    int sumOfLeftLeaves(TreeNode* root) {
     int ans=0;
     solve(root,ans);  
     return ans; 
    }
};

// Recursive 2

class Solution {
public:
    
    int sumOfLeftLeaves(TreeNode* root) 
    {
        if (root == NULL) 
        {
            return 0;
        }
        int sum = 0;
        if (root->left != NULL && root->left->left == NULL &&           
            root->left->right == NULL) 
        {
            sum += root->left->val;
        }
        sum += sumOfLeftLeaves(root->left) + sumOfLeftLeaves(root->right);
        return sum;
    
