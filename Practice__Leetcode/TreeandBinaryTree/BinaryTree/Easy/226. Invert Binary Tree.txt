/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    TreeNode* invertTree(TreeNode* root) {
       if(!root){
           return NULL;
       }
       queue<TreeNode*>q;
       q.push(root);
       while(!(q.empty())){
           TreeNode*f=q.front();
           q.pop();
           TreeNode*temp=f->left;
           
           f->left=f->right;
           f->right=temp;
           if(f->left){
               q.push(f->left);
           }
           if(f->right){
               q.push(f->right);
           }
           

       }
        return root;
    }
};
//Recursive

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
void invertTreeHelper(TreeNode* root){
    if(!root){
        return;
    }
    TreeNode * temp=root->left;
    root->left=root->right;
    root->right=temp;
    invertTreeHelper(root->left);
      invertTreeHelper(root->right);
      return;
  
}
    TreeNode* invertTree(TreeNode* root) {
        invertTreeHelper(root);
        return root;
    }
};