/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {
        if(!root1){
            return root2;
        }
        stack<pair<TreeNode*,TreeNode*>>s;
        s.push({root1,root2});
        while(!(s.empty())){
            pair <TreeNode*,TreeNode*>p=s.top();
            s.pop();
            if(!(p.first) || !(p.second)){
                continue;
            }
            p.first->val+=p.second->val;
            if(p.first->left){
                s.push({p.first->left,p.second->left}); 
            }
            else{
                p.first->left=p.second->left;
            }
             if(p.first->right){
                s.push({p.first->right,p.second->right}); 
            }
            else{
                p.first->right=p.second->right;
            }
        }
return root1;
    }
};

//Recursive

class Solution {
public:
    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {
        if(!root1 && !root2){
            return NULL;
        }
        if(!root1 ){
            TreeNode*root=new TreeNode(root2->val);
                    root->left=mergeTrees(NULL,root2->left);
                    root->right=mergeTrees(NULL,root2->right);

            return root;
        }
         if(!root2 ){
            TreeNode*root=new TreeNode(root1->val);
             root->left=mergeTrees(root1->left,NULL);
                    root->right=mergeTrees(root1->right,NULL);
            return root;
        }
        TreeNode*root=new TreeNode(root1->val + root2->val);
        root->left=mergeTrees(root1->left,root2->left);
                root->right=mergeTrees(root1->right,root2->right);
                return root;

    }
};
// Best Recursive


class Solution {
public:
    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {
        if ( t1 && t2 ) {
            TreeNode * root = new TreeNode(t1->val + t2->val);
            root->left = mergeTrees(t1->left, t2->left);
            root->right = mergeTrees(t1->right, t2->right);
            return root;
        } else {
            return t1 ? t1 : t2;
        }
    }
};
