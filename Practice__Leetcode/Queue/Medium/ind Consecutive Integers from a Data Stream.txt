// Vector

class DataStream {
public:
vector<int>v;
int n;
int key;

    DataStream(int value, int k) {
        n=k;
        key=value;
    }
    
    bool consec(int num) {
        while((v.size())&&(v.back()!=num)){
            v.pop_back();
        }
        v.push_back(num);
        if(num!=key){
            return false;
        }
        return v.size()>=n;

 
    }
};

/**
 * Your DataStream object will be instantiated and called as such:
 * DataStream* obj = new DataStream(value, k);
 * bool param_1 = obj->consec(num);
 */

// Queue

class DataStream {
public:
queue<int>q;
int n;
int key,sum;

    DataStream(int value, int k) {
        n=k;
        key=value;
        sum=0;
    }
    
    bool consec(int num) {
        
    num=(num==key)?1:0;
    sum+=num;
    q.push(num);
    if(q.size()<n){
        return false;
    }
    else if(q.size()==n){
        return sum==n;
    }
    
    sum-=q.front();
    q.pop();
    return sum==n;
 
    }
};

/**
 * Your DataStream object will be instantiated and called as such:
 * DataStream* obj = new DataStream(value, k);
 * bool param_1 = obj->consec(num);
 */