// SLiding Window

class Solution {
public:
bool isAnagram(vector<int>&v1,vector<int>&v2){
    for(int i=0;i<v1.size();i++){
        if(v1[i]!=v2[i]){
            return false;
        }
    }
    return true;
}
    vector<int> findAnagrams(string s, string p) {
        vector<int>v1(26,0),ans,v2(26,0);
        if(s.size()<p.size()){
            return ans;
        }
        for(auto x : p){
              v1[x-'a']++;
        }
        
        int i=0,j=0;
        while(j<s.size()){
               v2[s[j]-'a']++;
               if(j-i+1==p.size()){
                   if(isAnagram(v1,v2)){
                        ans.push_back(i);
                      
                       
                   }
               }
               if(j-i+1<p.size()){
                   j++;
               }
               else{
                   v2[s[i]-'a']--;
                   i++;
                   j++;
               }
        }
        return ans;
    }
};

// approch 2

class Solution {
public:
    vector<int> findAnagrams(string s, string p) {
        int s_len = s.length();
        int p_len = p.length();
        
        if(s.size() < p.size()) return {};
        
        vector<int> freq_p(26,0);
        vector<int> window(26,0);
        
        //first window
        for(int i=0;i<p_len;i++){
            freq_p[p[i]-'a']++;
            window[s[i]-'a']++;
        }
        
        vector<int> ans;
        if(freq_p == window) ans.push_back(0);
        
        for(int i=p_len;i<s_len;i++){
            window[s[i-p_len] - 'a']--;
            window[s[i] - 'a']++;
            
            if(freq_p == window) ans.push_back(i-p_len+1);
        }
        return ans;
    }
};