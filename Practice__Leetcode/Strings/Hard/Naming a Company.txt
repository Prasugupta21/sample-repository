class Solution {
public:
    long long distinctNames(vector<string>& id) {
      unordered_set<string>s;// by using  ordered set,it is giving TLE
       long long a[26][26]={0};   
//instead of 2D array we can initialize vector of vector of size 26 like

// vector<vector<int>>v(26,vector<int>(26,0));



        for(auto x:id){
            s.insert(x);
        }
        for(int i=0;i<id.size();i++){
            char c=id[i][0];
            for(char j='a';j<='z';j++){
                
                string s1=j+id[i].substr(1);
                if(s.find(s1)==s.end()){
                    a[c-'a'][j-'a']++;
                }
            }
            
            
        }
        long long ans=0;
        for(char i='a';i<='z';i++){
            for(char j='a';j<='z';j++){
                ans+=a[i-'a'][j-'a']*a[j-'a'][i-'a'];
            }
        }
        return ans;
    }
};

Same Logic ANother implementa. faster

class Solution {
public:
    long long distinctNames(vector<string>& ideas) {
        
        int n = ideas.size();
        
        unordered_set<string> s;
        
        // insert all ideas into set
        
        for(int i = 0; i < n; i++)
        {
            s.insert(ideas[i]);
        }
        
        vector<vector<int>> dp(26, vector<int> (26, 0));
        
        for(int i = 0; i < n; i++)
        {
            string idea = ideas[i];
            
            char old_char = idea[0];
            
            // try out all possible replacement
            
            for(char new_char = 'a'; new_char <= 'z'; new_char++)
            {
                idea[0] = new_char;
                
                if(s.count(idea) == 0)  // if not found in set
                {
                    dp[old_char - 'a'][new_char - 'a']++;
                }
            }
        }
        
        // calculate ans
        
        long long ans = 0;
        
        for(int i = 0; i < 26; i++)
        {
            for(int j = 0; j < 26; j++)
            {
                ans += (long long) dp[i][j] * (long long) dp[j][i];
            }
        }
        
        return ans;
    }
};