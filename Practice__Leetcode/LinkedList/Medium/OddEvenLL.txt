class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        if((!head)||(!(head->next))){
return head;
        }
      
        
        vector<pair<int,ListNode*>>v1,v2;
        ListNode*odd=head,*even=head->next;
        while((odd->next)&&(even->next)){
            v1.push_back({odd->val,odd});
            v2.push_back({even->val,even});
            odd=odd->next->next;
            even=even->next->next;
        }
        if(odd){
            v1.push_back({odd->val,odd});
        }
        if(even){
            v2.push_back({even->val,even});
        }
        
        int i=1;
        ListNode*temp=v1[0].second,*temp2=v2[0].second;
        while(i<v1.size()){
            temp->next=v1[i++].second;
            temp=temp->next;
        }
        i=1;
        while(i<v2.size()){
            temp2->next=v2[i++].second;
            temp2=temp2->next;
        }
        temp2->next=NULL;
        temp->next=v2[0].second;
        return head;
       
            
       
        
    }
};

// optimal 

class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        if((!head)||(!(head->next))){
return head;
        }
         ListNode* odd=head,*evenHead=head->next,*even=head->next;
        while((odd->next)&&(even->next)){
           odd->next=odd->next->next;
           even->next=even->next->next;
        odd=odd->next;
           even=even->next;
        }
       odd->next=evenHead;
        return head;
}
};