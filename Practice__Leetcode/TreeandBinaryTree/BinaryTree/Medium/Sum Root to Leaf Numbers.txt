/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    

public:
void solve (TreeNode*root,int &ans,int temp){
    if(!(root->left) && !(root->right)){
        temp=(temp*10)+root->val;
        ans+=temp;
        return;
    }
temp=(temp*10)+root->val;
if(root->left){
    solve(root->left,ans,temp);
}
if(root->right){
    solve(root->right,ans,temp);
}

    
}
    int sumNumbers(TreeNode* root) {
        
        int ans=0;
        solve(root,ans,0);
        return ans;

    }
};


// iterative

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    

public:

    

    int sumNumbers(TreeNode* root) {
        
        int ans=0;
     queue<TreeNode*>q;
     q.push(root);
     while(!q.empty()){
         TreeNode*f=q.front();
         q.pop();
         if(!(f->left) && !(f->right)){
             ans+=f->val;
         }
         if(f->left){
             f->left->val+=f->val*10;
             q.push(f->left);
         }
         if(f->right){
             f->right->val+=f->val*10;
             q.push(f->right);
         }
     }
        return ans;

    }
};