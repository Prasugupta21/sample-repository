class Solution {
public:
    int shortestSubarray(vector<int>& nums, int k) {
        deque<pair<int,long long>>d;
        long long currSum=0;
        int minlen=INT_MAX;
      for(int i=0;i<nums.size();i++){
          currSum+=nums[i];
          if(currSum>=k){
              minlen=min(minlen,i+1);

          }
          pair<int,long long>p={INT_MIN,INT_MIN};
            while((!(d.empty()))&&((currSum-d.front().second)>=k)){
                p=d.front();
                d.pop_front();
            }
            if(p.second!=INT_MIN){
                minlen=min(minlen,i-p.first);
            }
            while((!(d.empty()))&&(currSum<=d.back().second)){
                d.pop_back();
            }
            d.push_back({i,currSum});
      }
      return (minlen==INT_MAX)?-1:minlen;
    }
};