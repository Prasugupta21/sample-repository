class Solution {
public:
    int minSubArrayLen(int target, vector<int>& nums) {
        int i=0,left=0,currSum=0,flag=0,minlen=INT_MAX;
        while(i<nums.size()){
            while((currSum<target)&&(i<nums.size ())){
                currSum+=nums[i++];
            }
            while((currSum>=target)&&(left<nums.size())){
                flag=1;
                currSum-=nums[left];
                minlen=min(minlen,i-left);
                left++;
            }
        }
            return (minlen==INT_MAX)?0:minlen;
    }
};


//   using deque 
class Solution {
public:
    int minSubArrayLen(int target, vector<int>& nums) {
          deque<pair<int,long long>>d;
        long long currSum=0;
        int minlen=INT_MAX;
      for(int i=0;i<nums.size();i++){
          currSum+=nums[i];
          if(currSum>=target){
              minlen=min(minlen,i+1);

          }
          pair<int,long long>p={-1,INT_MIN};
            while((!(d.empty()))&&((currSum-d.front().second)>=target)){
                p=d.front();
                d.pop_front();
            }
            if(p.first!=-1){
                minlen=min(minlen,i-p.first);
            }
           
            d.push_back({i,currSum});
      }
      return (minlen==INT_MAX)?0:minlen;
    }
};

