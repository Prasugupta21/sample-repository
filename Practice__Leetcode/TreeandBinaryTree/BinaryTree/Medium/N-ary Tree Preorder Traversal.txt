/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
public:
    vector<int> preorder(Node* root) {
        vector<int>v;
        if(!root){
            return v;
        }
        stack<Node*>s;
        s.push(root);
        while(!s.empty()){
            Node*child=s.top();
            v.push_back(child->val);
            s.pop();
            for(int i=child->children.size()-1;i>=0;i--){
                s.push(child->children[i]);
            }
        }
return v;
    }
};


//Recursive

/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
public:
void preorderHelper(Node*root,vector<int>&v){
    if(!root){
        return ;
    }
    v.push_back(root->val);
    for(int i=0;i<root->children.size();i++){
        preorderHelper(root->children[i],v);
    }
    return;
}
    vector<int> preorder(Node* root) {
        vector<int>v;
       preorderHelper(root,v);
       return v;
    }
};