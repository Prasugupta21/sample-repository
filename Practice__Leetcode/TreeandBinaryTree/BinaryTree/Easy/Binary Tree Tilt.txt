/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
int sum(TreeNode*root){
    if(!root){
        return 0;
    }
    int ans=0;
 stack<TreeNode*>s;
 s.push(root);
 while(!(s.empty())){
     TreeNode * f=s.top();
     ans+=f->val;
     s.pop();
     if(f->left){
         s.push(f->left);
     }
     if(f->right){
         s.push(f->right);
     }
 }
 return ans;
}

   
    int findTilt(TreeNode* root) {
        
        int ans=0,temp=0;
        if(!root){
            return 0;
        }
      
     stack<TreeNode*>s;
     s.push(root);
     while(!(s.empty())){
         TreeNode * f=s.top();
           s.pop();
         temp+=abs(sum(f->left)-sum(f->right));
       
         f->val=temp;
         ans+=temp;
         temp=0;
         if(f->left){
         s.push(f->left);
     }
     if(f->right){
         s.push(f->right);
     }
         
     }
     return ans;
    }
};

//Recursive

class Solution {
public:
int sum(TreeNode*root){
 if(!root){
     return 0;
 }
 return sum(root->left)+sum(root->right) + root->val;
}
void solve(TreeNode* root){
      if(!root){
            return ;
        }
          int sum1=sum(root->left);
        int sum2=sum(root->right);
        
        root->val=abs(sum1-sum2);
        solve(root->left);
        solve(root->right);
        return;
}
   
    int findTilt(TreeNode* root) {
        
        if(!root){
            return 0;
        }
        solve (root);
      
        return sum(root->left) +  sum(root->right)  + root->val;
       
    }
};
