


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
void helperInorderTraversal(TreeNode* root,vector<int>&v){
      if(!root){
        return ;
    }
helperInorderTraversal(root->left,v);
v.push_back(root->val);
    helperInorderTraversal(root->right,v);
}
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int>v;
       
    helperInorderTraversal(root,v);
    
    return v;
    }
};

//Iterative
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
stack<TreeNode*>s;
void update(TreeNode*curr){
    for(;curr;curr=curr->left){
        s.push(curr);
    }
}
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int>v;

 update(root);
 for(TreeNode*curr;!(s.empty());update(curr->right)){
     curr=s.top();
     s.pop();
     v.push_back(curr->val);
 }
    
    return v;
    }
};