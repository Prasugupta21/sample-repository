/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    int findLen(ListNode*head){
        ListNode*temp=head;
        int cnt=0;
        while(temp){
            cnt++;
            temp=temp->next;
     
        }
        return cnt;
    }
    ListNode* FindMid(ListNode*temp,int i){
        int cnt=0;
        while((cnt<=i-1)&&(temp)){
            cnt++;
            temp=temp->next;
        }
        return temp;
    }
    ListNode* middleNode(ListNode* head) {
      ListNode*temp=head;
        if(!(head->next)){
            return head;
        }
      int x=findLen(head); 
        int i=(x-1)/2;
        if(x%2){
            return FindMid(head,i);
        }
        temp=temp->next;
    return FindMid(temp,i);
    
    }
};

Without Finding Length

class Solution {
public:

    ListNode* FindMid(ListNode*slow,    ListNode*fast){
      while((fast) && (fast->next)){
          slow=slow->next;
          fast=fast->next->next;
      }
//this is condition
        if(fast){
            return slow->next;
            
        }
        return slow;
    }
    ListNode* middleNode(ListNode* head) {
      ListNode*slow=head;
        ListNode*fast=head->next;    /* if we take fast =head; then we dont need to put condition if(fast ) {return slow->next;} directly do return slow*/


        if(!(head->next)){
            return head;
        }
    
    return FindMid(slow,fast);
    
    }
};

