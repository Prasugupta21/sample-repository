/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
TreeNode*buildTreeHelper(vector<int>& in, vector<int>& post,int postS,int postE,int inS,int inE){
    if(inS>inE){
        return NULL;
    }
     int rootData=post[postE];
    TreeNode*root=new TreeNode(rootData);
    int rootIndex=-1;
    for(int i=inS;i<=inE;i++){
        if(in[i]==rootData){
            rootIndex=i;
            break;
        }
    }

    int lpostS=postS;
int linS=inS;
int linE=rootIndex-1;
    int lpostE=linE-linS+lpostS;
    int rinS=rootIndex+1;
    int rinE=inE;
    int rpostS=lpostE+1;
    int rpostE=postE-1;
    root->left=buildTreeHelper(in,post,lpostS,lpostE,linS,linE);
    root->right=buildTreeHelper(in,post,rpostS,rpostE,rinS,rinE);
    return root;
}
    TreeNode* buildTree(vector<int>& in, vector<int>& post) {
   




   
      return buildTreeHelper(in,post,0,post.size()-1,0,in.size()-1);

        
    
    }
};


// approach 2

class Solution {
public:
    int post_idx;
    TreeNode* utilBST(vector<int>& inorder, int is,int ie, vector<int>& postorder){
        if(is>ie)return NULL;
        TreeNode* root=new TreeNode(postorder[post_idx--]);
        int idx;
        for(int i=is;i<=ie;i++){
            if(inorder[i]==root->val){
                idx=i;
                break;
            }
        }
        root->right=utilBST(inorder,idx+1,ie,postorder);
        root->left=utilBST(inorder,is,idx-1,postorder);
        return root;
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        post_idx=postorder.size()-1;
        return utilBST(inorder,0,inorder.size()-1,postorder);
        
    }
};