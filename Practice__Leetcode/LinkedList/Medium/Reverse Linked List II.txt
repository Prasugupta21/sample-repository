/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode*reverse(ListNode*temp){
        if(!(temp->next)){
            return temp;
        }
      ListNode*newHead=reverse(temp->next);
        temp->next->next=temp;
        temp->next=NULL;
        return newHead;
        
    }
    ListNode* reverseBetween(ListNode* head, int left, int right) {
  
        
        
        ListNode*curr=head,*prev=NULL;
        int cnt=1;
    while(cnt!=left){
        prev=curr;
        curr=curr->next;
        cnt++;
    }
        ListNode*start=curr;
while(cnt!=right){
    curr=curr->next;
    cnt++;
}
    ListNode*rest=curr->next;
        curr->next=NULL;
       ListNode*newHead= reverse(start);
        if(prev){
        prev->next=newHead;    
        }
        curr=newHead;
        while(curr->next){
            curr=curr->next;
            
        }
        curr->next=rest;
        if(left==1){
            return newHead;
        }
        return head;
        
        
        
        
        
        
    }
};


//Better 

class Solution {
public:

      
    ListNode* reverseBetween(ListNode* head, int left, int right) {
  
        
        
        ListNode*tail=NULL;
        ListNode*dummy=new ListNode(0,head);
      
       ListNode* prev=dummy;
        int i=0;
        while(i<left-1){
            prev=prev->next;
            i++;
        }
        tail=prev->next;
        i=0;
        while(i<right-left){
        ListNode*a=prev->next;
            prev->next=tail->next;
            tail->next=tail->next->next;
            prev->next->next=a;
         i++;   
        }
        return dummy->next;
        
      
    }
};


