class Solution {
public:
    bool canChange(string s, string t) {
        int i=0,j=0;
        int n=s.size();
        while((i<n)||(j<n)){
            while(s[i]=='_'){
                i++;
            }
            while(t[j]=='_'){
                j++;
            }
            if((i==n)&&(j==n)){
                return true;
            }
            if((i==n)||(j==n)||(s[i]!=t[j])){
                return false;
            }
            if((s[i]=='R')&&(i>j)){
                return false;
            }
            if((s[i]=='L')&&(i<j)){
                return false;
            }
            i++;
            j++;
        }
        return true;
    }
};

Best Runtime than above two implementation


class Solution {
public:
    bool canChange(string start, string target) {
        auto first1 = start.begin();
        auto last1 = start.end();
        auto first2 = target.begin();
        auto last2 = target.end();
        auto it1 = first1;
        auto it2 = first2;
        while (!(it1 == last1 && it2 == last2)) {
            if (*it1 == '_')
                ++it1;
            else if (*it2 == '_')
                ++it2;
            else if (*it1 == *it2) {
                    if (*it1 == 'R') {
                    if (std::distance(first1, it1) > std::distance(first2, it2)) {
                        return false;
                    }
                } else {
                    if (std::distance(first1, it1) < std::distance(first2, it2)) {
                        return false;
                    }
                }
                ++it1;
                ++it2;
            } else {
                return false;
            }
        }
        return true;
    }
};