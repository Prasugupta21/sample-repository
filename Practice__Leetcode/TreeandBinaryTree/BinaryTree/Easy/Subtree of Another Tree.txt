class Solution {
public:
bool isSameTree(TreeNode* root, TreeNode* subRoot){
    if(!root || !subRoot){
        return root==subRoot;
    }
    if(root->val!=subRoot->val){
        return false;
    }
    return isSameTree(root->left,subRoot->left) && isSameTree(root->right,subRoot->right);
}
   
    bool isSubtree(TreeNode* root, TreeNode* subRoot) {
        if(!root){
            return false;
        }
       
         bool opt1=isSubtree(root->left,subRoot);
         bool opt2=isSubtree(root->right,subRoot);
         if(!opt1 && !opt2){
             if(root->val!=subRoot->val){
                 return false;
             }
             return isSameTree(root->left,subRoot->left ) && isSameTree(root->right,subRoot->right );
         }
         return true;
    }

};


// approach 2

class Solution {
public:
bool isSameTree(TreeNode* root, TreeNode* subRoot){
    if(!root || !subRoot){
        return root==subRoot;
    }
    if(root->val!=subRoot->val){
        return false;
    }
    return isSameTree(root->left,subRoot->left) && isSameTree(root->right,subRoot->right);
}
    bool isSubtree(TreeNode* root, TreeNode* subRoot) {
        if(!root){
            return false;
        }
        
      
       if(isSameTree(root,subRoot)){
           return true;
       }
        
             return isSubtree(root->left,subRoot ) || isSubtree(root->right,subRoot ); 
        
    }
};
// iterative

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
bool isSameTree(TreeNode* root, TreeNode* subRoot){
    if(!root || !subRoot){
        return root==subRoot;
    }
    if(root->val!=subRoot->val){
        return false;
    }
    return isSameTree(root->left,subRoot->left) && isSameTree(root->right,subRoot->right);
}
   
    bool isSubtree(TreeNode* root, TreeNode* subRoot) {
        queue<TreeNode*>q;
        q.push(root);
        while(!q.empty()){
            TreeNode * f=q.front();
            q.pop();
            if(isSameTree(f,subRoot)){
                return true;
            }
            if(f->left){
                q.push(f->left);
            }
            if(f->right){
                q.push(f->right);
            }
        }
       
         
         return false;
    }

};



