
class Solution {
public:
    int minimumRounds(vector<int>& t) {
        unordered_map<int,int>m;
        set<int>s;
        int cnt=0;
        for(int i=0;i<t.size();i++){
            m[t[i]]++;
            s.insert(t[i]);
        }
        for(int i=0;i<t.size();i++){
            if(m[t[i]]==1){
                return -1;
            }

        }
        for(auto x :s){
         while(m[x]){
             
             if((m[x]>=3)&&(!(m[x]%3))){
                 cnt++;
                 m[x]-=3;
             }
             else  if((m[x]>=3)&&(m[x]%2)){
                 cnt++;
                 m[x]-=3;
             }
            else  if(!(m[x]%2)){
                 cnt++;
                 m[x]-=2;
             }
             else{
                 return -1;
             }
         }
        }
     return cnt;   
    }
};


// Better Approach

class Solution {
public:
    int minimumRounds(vector<int>& tasks) {
        unordered_map<int,int> mp;
        for(int i=0;i<tasks.size();i++){
            mp[tasks[i]]++;
        }
        
        int output=0;
        
        for (auto freq : mp){
            if(freq.second==1)
                return -1;
            if(freq.second%3==0){
                output += freq.second/3;
            }
            else{
                output += freq.second/3 + 1;
            }
        }
        return output;
    }
};