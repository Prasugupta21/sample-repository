// Array implementation




class MyCircularDeque {
 int* data;
int nextIndex;
int firstIndex;
int size;
int capacity;
public:
    MyCircularDeque(int k) {
             data=new int [k];
    nextIndex=0;
    firstIndex=0;
    size=0;
    capacity=k;
    }
    
    bool insertFront(int value) {
         if(size==capacity){
            return false;
        }
     
     
     
    
          firstIndex=(firstIndex-1+capacity)%capacity;
     
     
        
         data[firstIndex]=value;

     
     size++;
     return true;
      
    }
    
    bool insertLast(int value) {
         if(size==capacity){
            return false;
        }
     
        data[nextIndex]=value;
        nextIndex=(nextIndex+1)%capacity;
      size++;
      return true;
    }
    
    bool deleteFront() {
          if(isEmpty()){
            return false;
        }
      
    
 firstIndex=(firstIndex+1)%capacity;
 
        
      
size--;
   
         
        return true;
    }
    
    bool deleteLast() {
        if(isEmpty()){
            return false;
        }
         
            
      
          nextIndex=(nextIndex+capacity-1)%capacity;

        
        size--;
 
        return true;
    }
    
    int getFront() {
         if(isEmpty()){
            return -1;
        }
      return data[firstIndex];
    }
    
    
    int getRear() {
         if(isEmpty()){
            return -1;
        }
     
        
       return data[(nextIndex+capacity-1)%capacity];
    }
      

    
    bool isEmpty() {
         return size==0;
    }
    
    bool isFull() {
        return size==capacity;
    }
};
//LL singly


class Node
{
public: 
int data;
Node*next;
 Node(int data)
 {
     this->data=data;
     next=NULL;
 }
};

class MyCircularDeque {
    Node *head,*tail,*front;
int size;
int capacity;
public:
    MyCircularDeque(int k) {
            head=new Node(-1);
        size=0;
        tail=head;
        front=head;
       
        capacity=k;
    }
    
    bool insertFront(int value) {
         if(size==capacity){
            return false;
        }
        Node *newNode=new Node(value);
        if(isEmpty()){
            head->next=newNode;
            tail=newNode;
            front=newNode;
         

        }
        else{
            newNode->next=front;
            head->next=newNode;
            front=newNode;
        }
        size++;
        return true;
    }
    
    bool insertLast(int value) {
         if(size==capacity){
            return false;
        }
        
        if(isEmpty()){
            return insertFront(value);

        }
        else{
            Node *newNode=new Node(value);
        tail->next=newNode;
        tail=newNode;

        }
       
        size++;
        return true;
    }
    
    bool deleteFront() {
          if(isEmpty()){
            return false;
        }
           if(!(front->next)){
               Node*x=front;

            front=head;
            tail=head;
            delete x;
           
        }
        else{
       Node*temp=front;
       head->next=front->next;
       front=head->next;
    delete temp;
        }
       size--;
   
         
        return true;
    }
    
    bool deleteLast() {
        if(isEmpty()){
            return false;
        }
        if(!(front->next)){
            front=head;
            tail=head;
           
        }
        else{
         Node*temp=head;
         while(temp->next!=tail){
             temp=temp->next;
         }
        Node*temp2=tail;
        tail=temp;
        
        delete temp2;
        }
        size--;
        return true;
    }
    
    int getFront() {
         if(isEmpty()){
            return -1;
        }
        return front->data;
    }
    
    
    int getRear() {
         if(isEmpty()){
            return -1;
        }
        return tail->data;
    }
    
    bool isEmpty() {
         return size==0;
    }
    
    bool isFull() {
        return size==capacity;
    }
};

/**
 * Your MyCircularDeque object will be instantiated and called as such:
 * MyCircularDeque* obj = new MyCircularDeque(k);
 * bool param_1 = obj->insertFront(value);
 * bool param_2 = obj->insertLast(value);
 * bool param_3 = obj->deleteFront();
 * bool param_4 = obj->deleteLast();
 * int param_5 = obj->getFront();
 * int param_6 = obj->getRear();
 * bool param_7 = obj->isEmpty();
 * bool param_8 = obj->isFull();
 */
// linked list doubly

class Node
{
public: 
int data;
Node*next,*prev;
 Node(int data)
 {
     this->data=data;
     next=NULL;
     prev=NULL;
 }
};

class MyCircularDeque {
    Node *head,*tail;
int size;
int capacity;
public:
    MyCircularDeque(int k) {
            head=new Node(-1);
        size=0;
        tail=new Node(-1);
    tail->prev=head;
    head->next=tail;
        
        capacity=k;
    }
    
    bool insertFront(int value) {
         if(isFull()){
            return false;
        }
        Node *newNode=new Node(value);
       Node *temp=head->next;
       head->next=newNode;
       newNode->prev=head;
       newNode->next=temp;
       temp->prev=newNode;

      
        size++;
        return true;
    }
    
    bool insertLast(int value) {
         if(isFull()){
            return false;
        }
        Node *newNode=new Node(value);
    
      newNode->prev=tail->prev;
      tail->prev->next=newNode;
      newNode->next=tail;
    
      tail->prev=newNode;

       
        size++;
        return true;
    }
    
    bool deleteFront() {
          if(isEmpty()){
            return false;
        }
       Node*temp=head->next;
       head->next=temp->next;
       temp->next->prev=head;
   
       size--;
   
          delete temp;
        return true;
    }
    
    bool deleteLast() {
        if(isEmpty()){
            return false;
        }
        
       Node*temp=tail->prev->prev;
       Node*temp2=tail->prev;
       temp->next=tail;
        tail->prev=temp;



      
      
        delete temp2;
    
        size--;
        return true;
    }
    
    int getFront() {
         if(isEmpty()){
            return -1;
        }
        return head->next->data;
    }
    
    
    int getRear() {
         if(isEmpty()){
            return -1;
        }
        return tail->prev->data;
    }
    
    bool isEmpty() {
         return size==0;
    }
    
    bool isFull() {
        return size==capacity;
    }
};

/**
 * Your MyCircularDeque object will be instantiated and called as such:
 * MyCircularDeque* obj = new MyCircularDeque(k);
 * bool param_1 = obj->insertFront(value);
 * bool param_2 = obj->insertLast(value);
 * bool param_3 = obj->deleteFront();
 * bool param_4 = obj->deleteLast();
 * int param_5 = obj->getFront();
 * int param_6 = obj->getRear();
 * bool param_7 = obj->isEmpty();
 * bool param_8 = obj->isFull();
 */

