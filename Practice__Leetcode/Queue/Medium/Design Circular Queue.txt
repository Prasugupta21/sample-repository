// Using Array



class MyCircularQueue {
int *data;
int size;
int capacity;
int nextIndex,firstIndex,rear;

public:
    MyCircularQueue(int k) {
          data=new int [k];
        size=0;
       nextIndex=0;
       firstIndex=-1;
        capacity=k;
        rear=-1;
    }
    bool isEmpty() {
        return size==0;
    }
    bool enQueue(int value) {
        if(size==capacity){
            return false;
        }
        data[nextIndex]=value;
        nextIndex=((nextIndex+1)%capacity);

        if(firstIndex==-1){
            firstIndex=0;
        }
        size++;
        rear=value;
        return true;
    }
    
    bool deQueue() {
        if(isEmpty()){
            return false;
        }
        firstIndex=((firstIndex+1)%capacity);
        
        size--;
        if(!(size)){
            nextIndex=0;
            firstIndex=-1;
        }
        return true;

    }
    
    int Front() {
        if(isEmpty()){
            return -1;
        }
        return data[firstIndex];
    }
    
    int Rear() {
        if(isEmpty()){
            return -1;
        }
        return rear;
    }
    
    
    
    bool isFull() {
         return size==capacity;
    }
};

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue* obj = new MyCircularQueue(k);
 * bool param_1 = obj->enQueue(value);
 * bool param_2 = obj->deQueue();
 * int param_3 = obj->Front();
 * int param_4 = obj->Rear();
 * bool param_5 = obj->isEmpty();
 * bool param_6 = obj->isFull();
 */



// using Singly LL

class Node
{
public: 
int data;
Node*next;
 Node(int data)
 {
     this->data=data;
     next=NULL;
 }
 };

class MyCircularQueue {
Node *head,*tail;
int size;
int capacity;


public:
    MyCircularQueue(int k) {
        head=NULL;
        size=0;
        tail=NULL;
        capacity=k;






    }
    bool isEmpty() {
        return size==0;
    }
    bool enQueue(int value) {
        if(size==capacity){
            return false;
        }
        Node *newNode=new Node(value);
        if(!head){
            head=newNode;
            tail=newNode;

        }
        else{
            tail->next=newNode;
            tail=newNode;

        }
       
        size++;
        return true;
    }
    
    bool deQueue() {
        if(isEmpty()){
            return false;
        }
       Node*temp=head;
       head=head->next;
   
       size--;
   
          delete temp;
        return true;

    }
    
    int Front() {
        if(isEmpty()){
            return -1;
        }
        return head->data;
    }
    
    int Rear() {
        if(isEmpty()){
            return -1;
        }
        return tail->data;
    }
    
    
    
    bool isFull() {
       return size==capacity;
    }
};

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue* obj = new MyCircularQueue(k);
 * bool param_1 = obj->enQueue(value);
 * bool param_2 = obj->deQueue();
 * int param_3 = obj->Front();
 * int param_4 = obj->Rear();
 * bool param_5 = obj->isEmpty();
 * bool param_6 = obj->isFull();
 */

// using Doubly LL

class Node
{
public: 
int data;
Node*next,*prev;
 Node(int data)
 {
     this->data=data;
     next=NULL;
     prev=NULL;
 }
 };

class MyCircularQueue {
Node *head=new Node(0),*tail=new Node(0);
int size;
int capacity;


public:
    MyCircularQueue(int k) {
        head->next=tail;
        tail->prev=head;
        size=0;
        
        capacity=k;
       






    }
    bool isEmpty() {
        return size==0;
    }
    bool enQueue(int value) {
        if(isFull()){
            return false;
        }
        Node *newNode=new Node(value);
        Node*temp=tail->prev;
       temp->next=newNode;
       newNode->prev=temp;
       
       tail->prev=newNode;
       newNode->next=tail;

       
        size++;
        return true;
    }
    
    bool deQueue() {
        if(isEmpty()){
            return false;
        }
       Node*temp=head->next;
       Node*temp2=temp->next;
       head->next=temp2;
       temp2->prev=head;
       delete temp;
       
   
       size--;
   
        
        return true;

    }
    
    int Front() {
        if(isEmpty()){
            return -1;
        }
        return head->next->data;
    }
    
    int Rear() {
        if(isEmpty()){
            return -1;
        }
        return tail->prev->data;
    }
    
    
    
    bool isFull() {
       return size==capacity;
    }
};

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue* obj = new MyCircularQueue(k);
 * bool param_1 = obj->enQueue(value);
 * bool param_2 = obj->deQueue();
 * int param_3 = obj->Front();
 * int param_4 = obj->Rear();
 * bool param_5 = obj->isEmpty();
 * bool param_6 = obj->isFull();
 */