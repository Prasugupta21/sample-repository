/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
void solve(TreeNode* root,vector<vector<int>>&v,int level){
    
    v[level].push_back(root->val);
    if(root->left){
        solve(root->left,v,level-1);
    }
    if(root->right){
        solve(root->right,v,level-1);
    }
    return;
}
int height(TreeNode* root){
    if(!root){
        return 0;
    }
    return 1+max(height(root->left),height(root->right));
}

    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        
        int h=height(root);
        vector<vector<int>>v(h);
if(!root){
            return v;
        }
        --h;

        solve(root,v,h);
        return v;
    }
};

//Recursive 2
class Solution {
public:
void solve(TreeNode* root,vector<vector<int>>&v,int level){
    if(v.size()==level){
        v.push_back({});
    }
    v[level].push_back(root->val);
    if(root->left){
        solve(root->left,v,level+1);
    }
    if(root->right){
        solve(root->right,v,level+1);
    }
    return;
}


    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        
       
        vector<vector<int>>v;
if(!root){
            return v;
        }
      
        solve(root,v,0);
        reverse(v.begin(),v.end());
        return v;
    }
};

//iterative

class Solution {
public:


    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        
       
     vector<vector<int>>v;
         queue<TreeNode*>q;
         if(!root){
             return v;
         }
        q.push(root);
        q.push(NULL);
        
        vector<int>temp;
        while(!(q.empty())){
            TreeNode*f=q.front();
            q.pop();
            if(!f){
                v.insert(v.begin(),temp);
                temp.clear();
                if(!(q.empty())){
                    q.push(NULL);
                    
                }

            }
            else{
                temp.push_back(f->val);
                  if(f->left){
                q.push(f->left);
            }
            if(f->right){
                q.push(f->right);
            }
            }
          
        }
        return v;
    }
};