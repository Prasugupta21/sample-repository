class Solution {
public:
    int firstUniqChar(string s) {
        map<char,int>m;
        
        for(auto x : s){
            m[x]++;
        }
        for(int i=0;i<s.size();i++){
            auto itr = m.find(s[i]);
            if(itr->second==1){
                return  i;
            }
        }
        return -1;
    }
};


Another Approach

class Solution {
public:
    int firstUniqChar(string s) {
    
    vector<int> hash(26,-1);
    int ans =s.size();
    for(int i=0;i<s.size();i++)
    {
        int a=s[i]-'a';
        if(hash[a]==-1)
        {
            hash[a]=i;//when letter appears first time store it's index
        }
        else
            hash[a]=-2;//if letter is repeated 
    }
    
    for(int i=0;i<26;i++)
    {
        if(hash[i]>=0)//skipping letters  which were not present in word or were repeating character
    
        {
         ans=min(ans,hash[i]);   
        }
        
            
    }
    if(ans==s.size())
        return -1;
    else
        
    return ans;

    }
};

