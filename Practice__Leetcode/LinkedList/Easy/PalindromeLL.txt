class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if( !(head->next)){
            return true;
        }
        vector<int>v1,v2;
        ListNode*temp=head;
        while(temp){
            v1.push_back(temp->val);
            temp=temp->next;
        }
        ListNode*prev=NULL;
        ListNode*curr=head;
        ListNode* temp1=head->next;
        while(curr){
            curr->next=prev;
            prev=curr;
            curr=temp1;
            if(temp1){
            temp1=temp1->next;
            }
            
        }
       
        while(prev){
            v2.push_back(prev->val);
            prev=prev->next;
        }
        int i=0;
        while(i<v2.size()){
            if(v1[i]!=v2[i]){
                return false;
            }
            i++;
        }
        return true;
      
    }
};

Better Than Above Code


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if( !(head->next)){
            return true;
        }
        vector<int>v1;
        ListNode*temp=head;
        while(temp){
            v1.push_back(temp->val);
            temp=temp->next;
        }
        int i=0,j=v1.size()-1;
        while(i<j){
            if(v1[i++]!=v1[j--]){
                return false;
            }
            
        }
        return true;
      
    }
};


The best Solution Constant Space and Linear time Complexicity
class Solution {
public:
    bool Compare(ListNode*head,ListNode*rev){
        while((head)&&(rev)){
            if(rev->val != head->val){
                return  false;
            }
            head=head->next;
            rev=rev->next;
        }
        return true;
    }
ListNode* findMid(   ListNode*slow, ListNode*fast){
    while((fast) && (fast->next)){
        slow=slow->next;
        fast=fast->next->next;
    }
    return slow;
}
    ListNode*reverse(ListNode*mid){
ListNode*prev=NULL;
        ListNode*curr=mid;
        ListNode*temp=mid->next;
        while(curr){
            curr->next=prev;
            prev=curr;
            curr=temp;
            if(temp){
                temp=temp->next;
            }
        }
        return prev;
    }
    
    bool isPalindrome(ListNode* head) {
        if( !(head->next)){
            return true;
        }
        ListNode*slow=head;
        ListNode*fast=head;
        
      
        ListNode*mid=findMid(slow,fast);
        ListNode*rev=reverse(mid);
      
        return Compare(head,rev);
      
    }
};