class Solution {
public:
void postOrderHelper(TreeNode*root,vector<int>&ans){
   
    if(root->left){
 postOrderHelper(root->left,ans);
    }
    if(root->right){
 postOrderHelper(root->right,ans);
    }
     ans.push_back(root->val);
    
   return;
}
    vector<int> postorderTraversal(TreeNode* root) {
    
      vector<int>ans;
        if(!root){
            return ans;
        }
        
       postOrderHelper(root,ans);
       return ans;
    
    }
};

//Recursive

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
    
        vector<int>ans;
        if(!root){
            return ans;
        }
        stack<TreeNode*>s;
        s.push(root);
      while(!s.empty()){
          TreeNode*f=s.top();
          s.pop();
         
           if(f->left){
              s.push(f->left);
          }
          if(f->right){
              s.push(f->right);

          }
           ans.push_back(f->val);
         
      }
      reverse(ans.begin(),ans.end());
       return ans;
    
    }
};