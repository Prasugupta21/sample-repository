/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        if(!(head)){
            return NULL;
        }
        unordered_map<ListNode*,int>m;
        ListNode*temp=head;
        while(temp){
             m[temp]++;
            if(m.count(temp->next)){
                return temp->next;
            }
            temp=temp->next;
        }
       return NULL;
    }
};

//better 

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
      if(!head){
          return NULL;
          
      }
        ListNode*slow=head,*fast=head;
        int flag=0;
        while((fast)&&(fast->next)){
            slow=slow->next;
            fast=fast->next->next;
            if(slow==fast){
                flag=1;
                break;
            }
        }
       
        
        if(!flag){
            return NULL;
        }
         slow=head;
        while(slow!=fast){
            slow=slow->next;
            fast=fast->next;
        }
        return slow;
        
        
       
    }
};