//Recursive


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
int Height(TreeNode*root){
     if(!root){
            return 0;
        }
        return 1+max(Height(root->left),Height(root->right));
}

    bool isBalanced(TreeNode* root) {
        if(!root){
            return true;
        }
        int leftHeight=Height(root->left);
        int rightHeight=Height(root->right);
        return (abs(leftHeight-rightHeight)<=1) && isBalanced(root->left) && isBalanced(root->right);
    }
};

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
int Height(TreeNode*root){
     if(!root){
            return 0;
        }
        return 1+max(Height(root->left),Height(root->right));
}

    bool isBalanced(TreeNode* root) {
        if(!root){
            return true;
        }
       
      queue<TreeNode*>q;
      q.push(root);
       while(!q.empty()){
           TreeNode*f=q.front();
           q.pop();
            int leftHeight=Height(f->left);
        int rightHeight=Height(f->right);
           if(abs(leftHeight-rightHeight)>1){
               return false;

           }
           if(f->left){
               q.push(f->left);
           }
           if(f->right){
               q.push(f->right);
           }
       }
       return true;
    }
};