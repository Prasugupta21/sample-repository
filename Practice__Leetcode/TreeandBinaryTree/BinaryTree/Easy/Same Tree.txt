// Recursive 


class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        if (p == NULL || q == NULL) return (p == q);
        if(p->val != q->val) return false;
        else return isSameTree(p->left, q->left) && isSameTree(p->right, q->right);
    }
};

//iterative

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        queue<TreeNode*>q1,q2;
        q1.push(p);
        q2.push(q);
        while((!q1.empty())&&(!q2.empty())){
            TreeNode*f1=q1.front();
            TreeNode*f2=q2.front();
            if((!f1 && f2) || (!f2 && f1)){
                return false;
            }
            if(!f1 && !f2){
                q1.pop();
            q2.pop();
            continue;
            }
            if(f1->val!=f2->val){
                return false;
            }
            q1.pop();
            q2.pop();
        TreeNode*leftChild1=f1->left;
              

    
   q1.push(leftChild1);
    
      
 q1.push(f1->right);
        
    
 q2.push(f2->left);
    
       
    
    q2.push(f2->right);
    
    


        }
        return true;
    }
};