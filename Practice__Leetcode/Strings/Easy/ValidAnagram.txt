class Solution {
public:
    bool isAnagram(string s, string t) {
     map<char,int>m1,m2;
        for(auto x:s){
            m1[x]++;
        }
        for(auto x : t){
            m2[x]++;
        }
        int i=0;
        sort(s.begin(),s.end());
              sort(t.begin(),t.end());
        if(s.size()!=t.size()){
            return false;
        }
        while(i<s.size()){
            if(!((s[i]==t[i]) && (m1[s[i]]==m2[t[i]]))){
                return false;
            }
            i++;
         
}
        return true;
    }
};


Approach 2 faster than 1


class Solution {
public:
    bool isAnagram(string s, string t) {
        pair<char,int>p1,p2;
        sort(s.begin(),s.end());
           sort(t.begin(),t.end());
        if(s.size()!=t.size()){
            return false;
        }
        int i=0;
        while(i<s.size()){
              pair<char,int>p1,p2;
        p1.first=s[i];
            
            
            p1.second+=1;
            p2.first=t[i];
          
             
            p2.second+=1;
            if(p1!=p2){
                return false;
            }
            i++;
        }
       
        return true;
        
    }
};

                                               Most Faster than above two

class Solution {
public:
    bool isAnagram(string s, string t) {
       vector<int>v(26,0);
        if(s.size()!=t.size()){
            return false;
        }
        for(auto x:s){
            v[x-'a']++;
        }
        for(auto x :t){
            if(v[x-'a']){
                v[x-'a']--;            }
        }
        for(int i=0;i<v.size();i++){
            if(v[i]){
                return false;
            }
        }
        return true;
    }
};